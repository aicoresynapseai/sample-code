# This Kubernetes Service manifest is an example of what a Generative AI
# might produce to expose the Java Spring Boot application within the cluster.

apiVersion: v1
kind: Service
metadata:
  name: ai-driven-java-app-service # GenAI provides a logical service name
  labels:
    app: ai-driven-java-app
spec:
  selector:
    app: ai-driven-java-app # GenAI automatically matches the service to the deployment's labels
  ports:
    - protocol: TCP
      port: 80 # External port for the service
      targetPort: 8080 # Internal port of the application container
      # GenAI intelligently maps external service ports to internal container ports.
  type: ClusterIP # GenAI defaults to ClusterIP for internal access, or NodePort/LoadBalancer for external
  # For external access, GenAI might suggest:
  # type: LoadBalancer # Automatically provisions a cloud load balancer
  # or an Ingress resource:
  # apiVersion: networking.k8s.io/v1
  # kind: Ingress
  # metadata:
  #   name: ai-driven-java-app-ingress
  # spec:
  #   rules:
  #   - host: myapp.example.com
  #     http:
  #       paths:
  #       - path: /
  #         pathType: Prefix
  #         backend:
  #           service:
  #             name: ai-driven-java-app-service
  #             port:
  #               number: 80