# This GitHub Actions workflow demonstrates how Copilot can assist in writing CI/CD pipelines.
# Open this file and start typing comments or workflow definitions to see Copilot's suggestions.

# Name of the workflow
# Copilot can suggest the workflow name. Try typing `# Workflow name`
name: Java CI/CD with Copilot Demo

# Trigger the workflow on push to the main branch and pull requests
# Copilot helps with event triggers. Try typing `# On push to main branch`
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define jobs for the workflow
jobs:
  build-and-test:
    # Set the runner environment
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository code
      # Copilot suggests common actions. Try typing `# Checkout code`
      - uses: actions/checkout@v4

      # Set up Java Development Kit (JDK)
      # Copilot helps configure JDK versions. Try typing `# Setup Java 17`
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      # Build the project with Maven and run tests
      # Copilot can suggest Maven commands. Try typing `# Run Maven build and tests`
      - name: Build with Maven
        run: mvn -B package --file pom.xml

      # (Optional) Static code analysis using SonarCloud/SonarQube
      # Copilot can suggest integration steps for quality gates.
      # Try typing `# Run SonarCloud scan` (requires SONAR_TOKEN secret)
      #- name: SonarCloud Scan
      #  env:
      #    GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #    SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #  run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=YourProjectKey

  deploy-dev:
    # Define dependencies for this job
    needs: build-and-test # This job runs only after build-and-test is successful
    runs-on: ubuntu-latest
    environment: development # Define a GitHub environment

    steps:
      - uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: java-app # Name of the artifact uploaded in build-and-test job (if you add an upload step)
          path: .

      # Use a Bash script for deployment
      # Copilot can suggest running shell scripts. Try typing `# Deploy using custom bash script`
      - name: Deploy to Development Environment
        run: |
          chmod +x scripts/deploy_java_app.sh
          ./scripts/deploy_java_app.sh production_server_ip # Pass actual server IP or hostname

      # Alternatively, use a Python script for more complex deployment logic
      # Copilot can also suggest running Python scripts.
      #- name: Deploy with Python Script
      #  uses: actions/setup-python@v5
      #  with:
      #    python-version: '3.x'
      #- run: python scripts/deploy_java_app.py --server production_server_ip --app-version ${{ github.sha }}